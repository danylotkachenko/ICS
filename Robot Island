{Filename 	: TkaDanRobot_DirGraphics}
{Program	:    }
{Outline 	     }
{            	 }
{Programmer 	: Danylo Tkachenko}
{Class	        : ICS3U (Mr.Sze)}
{Due Date	:  2017-10-27}
uses Crt, Graph, SysUtils;
var
i, j, icompass: integer;
ix, iy : integer;
newX, newY : integer;
isteps : integer;
r : integer;
iterStart, iterFinish: string;


gd,gm : smallint;

island : array[1..11] of array[1..11] of integer;  //11 by 11 field

function IsEndOfTheIslandReached (direction: integer): boolean;
  begin

    if direction = 1 then //east
       begin
        newX := ix + 1;
        newY := iy;
       end;
    if direction = 2 then //west
       begin
        newX := ix - 1;
        newY := iy;
       end;
    if direction = 3 then //north
       begin
        newX := ix;
        newY := iy + 1;
       end;
    if direction = 4 then //south
       begin
        newX := ix;
        newY := iy - 1;
       end;

   if (newX = 12) or (newX = 0) or (newY = 12) or (newY = 12) then
       begin
            IsEndOfTheIslandReached := true;  //robot got off the island
       end
   else
       begin
            IsEndOfTheIslandReached := false;  //robot is still on the island
       end;

  end;

function CanIGoThisWay (direction: integer): boolean;
  begin

    if direction = 1 then //east
       begin
        newX := ix + 1;
        newY := iy;
       end;
    if direction = 2 then //west
       begin
        newX := ix - 1;
        newY := iy;
       end;
    if direction = 3 then //north
       begin
        newX := ix;
        newY := iy + 1;
       end;
    if direction = 4 then //south
       begin
        newX := ix;
        newY := iy - 1;
       end;

    if island[newX][newY] = 0 then
       begin
            CanIGoThisWay := true;
       end
    else
        begin
             CanIGoThisWay := false;
        end;

  end;

procedure DisplayAMap;
          begin
               for i := 1 to 12 do
                   begin
                        MoveTo(40*i, 40);
                        LineTo(40*i, 480);
                        MoveTo(40, 40*i);
                        LineTo(480, 40*i);
                   end;
          end;

procedure DrawARobot (var RobotX, RobotY, Radius : integer);
          begin
               circle(40+20+(RobotX-1)*40, 40+20+(RobotY-1)*40, Radius);
          end;

procedure DrawAnObstacle (var ObstacleX, ObstacleY : integer);
          begin
               Rectangle(40+20+(ObstacleX-1)*40-15, 40+20+(ObstacleY-1)*40-15,40+20+(ObstacleX-1)*40+15, 40+20+(ObstacleY-1)*40+15)
          end;

procedure WriteText (var textToWrite: string);
          begin
               MoveTo(20, 20);
               OutText(textToWrite);
          end;

begin
gd:=detect;
gm:=0;
InitGraph(gd,gm, 'c:\dev-pas');

isteps := 0;

for i := 1 to 11 do
    for j := 1 to 11 do
        begin
             island[i][j] := 0;
        end;

//Obstacles begin
island[3][5] := 2;
island[8][5] := 2;
island[5][10] := 2;
island[1][1] := 2;
island[11][8] := 2;
island[7][6] := 2;
//Obstacles end

for i := 1 to 11 do
    for j := 1 to 11 do
        begin
             if island [i][j] = 2 then
                begin
                     DrawAnObstacle(i,j);
                end;
        end;

randomize;

DisplayAMap;
{writeln ('IsEndOfTheIslandReached ', IsEndOfTheIslandReached(1));
writeln ('CanIGoThisWay ', CanIGoThisWay(1));}
iterStart := 'Robot on the Island';
iterFinish := 'ROBOT GOT OFF THE ISALND';

for i := 1 to 6 do
begin
WriteText(iterStart);
ix := 6;
iy := 6;
writeln ('Try #', i);
r := 20 - 3*i;
DrawARobot(ix, iy, r);
delay (2000);

//ROBOT BEGINS MOVING
repeat
      begin
           icompass:= Random(4)+1;
           writeln('icompass - ', icompass);
                  if icompass = 1 then //east
                     begin
                          if (CanIGoThisWay(icompass) = true) then
                             begin
                                ix := ix + 1;
                                isteps := isteps + 1;
                                {writeln ('# of steps: ', isteps);
                                writeln ('You advanced one meter east.');
                                writeln (ix,', ',iy);
                                writeln ('');}
                             end;
                          if (CanIGoThisWay(icompass) = false) then
                             begin
                                  {writeln ('There is an obstacle in your way.');
                                  writeln ('');}
                             end;
                     end;
                  if icompass = 2 then //west
                     begin
                          if (CanIGoThisWay(icompass) = true) then
                             begin
                                  ix := ix - 1;
                                  isteps := isteps + 1;
                                  {writeln ('# of steps: ', isteps);
                                  writeln ('You advanced one meter west.');
                                  writeln (ix,', ',iy);
                                  writeln ('');}
                             end;
                          if (CanIGoThisWay(icompass) = false) then
                             begin
                                  {writeln ('There is an obstacle in your way.');
                                  writeln ('');}
                             end;
                     end;
                  if icompass = 3 then //north
                     begin
                          if (CanIGoThisWay(icompass) = true) then
                             begin
                                  iy := iy + 1;
                                  isteps := isteps + 1;
                                  {writeln ('# of steps: ', isteps);
                                  writeln ('You advanced one meter north.');
                                  writeln (ix,', ',iy);
                                  writeln ('');}
                             end;
                          if (CanIGoThisWay(icompass) = false) then
                             begin
                                  {writeln ('There is an obstacle in your way.');
                                  writeln ('');}
                             end;
                     end;
                  if icompass = 4 then //south
                     begin
                          if (CanIGoThisWay(icompass) = true) then
                             begin
                                  iy := iy - 1;
                                  isteps := isteps + 1;
                                  {writeln ('# of steps: ', isteps);
                                  writeln ('You advanced one meter south.');
                                  writeln (ix,', ',iy);
                                  writeln ('');}
                             end;
                          if (CanIGoThisWay(icompass) = false) then
                             begin
                                  {writeln ('There is an obstacle in your way.');
                                  writeln ('');}
                             end;
                     end;
                  DrawARobot(ix, iy, r);
                  delay (2000);

                  if (IsEndOfTheIslandReached(icompass) = true) then
                     begin
                          WriteText(iterFinish);
                          writeln ('ROBOT GOT OFF THE ISALND');
                     end;

      end;
until (IsEndOfTheIslandReached(icompass) = true);
//ROBOT STOPS MOVING
end;
delay (5000);
CloseGraph;

readln ();
end.
