{Filename 	: TkaDanBacteria}
{Program	:          }
{Outline                   }
{Programmer : Danylo Tkachenko}
{Class	    : ICS3U (Mr.Sze)}
{Due Date	: 2017-12-8}
uses WinCrt, Graph, sysutils;

type
map = array [1..120] of array [1..120] of integer;

procedure DrawBorder;
var
gd,gm : smallint;

begin
gd:=detect;
gm:=0;
InitGraph(gd,gm, 'c:\dev-pas');

setcolor(7);
Line(5, 5, 727, 5);
Line(727, 5, 727, 727);
Line(727, 727, 5, 727);
Line(5, 727, 5, 5);

Line(727, 50, 1360, 50);
Line(1100, 50, 1100, 500);
Line(727, 500, 1360, 500);
Line(727, 727, 1360, 727);
Line(727, 5, 1360, 5);
Line(1360, 5, 1360, 727);
end;

procedure DrawBacteria (var BacteriaX, BacteriaY : integer);
          begin
               setcolor(12);
               Rectangle(6+3+(BacteriaX-1)*6, 6+3+(BacteriaY-1)*6,6+3+(BacteriaX-1)*6, 6+3+(BacteriaY-1)*6)
          end;

procedure CleanBacteria (var CoverX, CoverY : integer);
          begin
               setcolor(16);
               Rectangle(6+3+(CoverX-1)*6, 6+3+(CoverY-1)*6,6+3+(CoverX-1)*6, 6+3+(CoverY-1)*6)
          end;

procedure BlackBox;
          begin
               setcolor(16);
               Bar(850, 510, 1340, 558)
          end;

procedure InitialMenuEraser;
          begin
               setcolor(16);
               Bar(730, 55, 1090, 200)
          end;


//PrintArray Begins
function DrawArray(var CurrentMap, NextStepMap: map) : integer;
var
i, j : integer;
begin
     for i := 1 to 120 do
         begin
              for j := 1 to 120 do
                  begin
                       if (CurrentMap[i][j] <> NextStepMap[i][j]) then
                       begin
                            if (NextStepMap[i][j] = 0) then
                               begin
                                    CleanBacteria(i,j);
                               end;
                            if (NextStepMap[i][j] = 1) then
                               begin
                                    DrawBacteria(i,j);
                               end;
                       end;
                  end;
         end;
end;
//PrintArray Ends


//GetNumberOfNeighbours Begins
function GetNumberOfNeighbours (var arrToPrint : map; i, j : integer) : integer;
begin
GetNumberOfNeighbours := 0;

if (i+1 <= 120) and (arrToPrint[i+1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (arrToPrint[i-1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j+1 <= 120) and (arrToPrint[i][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j-1 >= 1) and (arrToPrint[i][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 120) and (j+1 <= 120) and (arrToPrint[i+1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j-1 >= 1) and (arrToPrint[i-1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 120) and (j-1 >= 1) and (arrToPrint[i+1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j+1 <= 120) and (arrToPrint[i-1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

end;
//GetNumberOfNeighbours Ends


//Step Begins
function Step (var arrToPrint, NextStepMap: map) : integer; //add NextStepMap as an argument
var
number_of_neighbours, i, j : integer;
begin
     for i := 1 to 120 do
         for j := 1 to 120 do
             begin
             number_of_neighbours := GetNumberOfNeighbours(arrToPrint, i, j);

                  if (arrToPrint[i][j] = 0) and (number_of_neighbours = 3) then
                     NextStepMap[i][j] := 1;

                  if (arrToPrint[i][j] = 1) and ((number_of_neighbours >= 4) or (number_of_neighbours <= 1)) then
                     NextStepMap[i][j] := 0;

                  if (arrToPrint[i][j] = 0) and ((number_of_neighbours >= 4) or (number_of_neighbours <= 1)) then
                     NextStepMap[i][j] := 0;

                  if (arrToPrint[i][j] = 1) and ((number_of_neighbours = 2) or (number_of_neighbours = 3)) then
                     NextStepMap[i][j] := 1;

                  if (arrToPrint[i][j] = 0) and (number_of_neighbours = 2) then
                     NextStepMap[i][j] := 0;
             end;
end;
//Step Ends


//BacteriaCounter Begins
function BacteriaCounter (var NextStepMap: map) : integer;
var
ibacteria_count, icount, i, j : integer;
ibacteria_count_string : longint;
begin
     ibacteria_count := 0;
     icount := 0;
                     for i := 1 to 120 do
                         for j := 1 to 120 do
                             if NextStepMap[i][j] = 1 then
                                begin
                                     ibacteria_count := ibacteria_count + 1;  //calculates number of bacteria
                                end;
BacteriaCounter := ibacteria_count;
end;
//BacteriaCounter Ends

//DescriptionAndRules Begins
procedure DescriptionAndRules;
begin
setcolor(7);     //12
settextstyle(2,0,2);  //5
outtextxy(735,100,'Rules:');
settextstyle(1,0,1);
outtextxy(735,125,'1 or 4(or more) neighbours - cell dies');
outtextxy(735,150,'2 or 3 neighbours - survives for another');
outtextxy(735,165,'cycle');
outtextxy(735,190,'An empty(dead) cell must have three live');
outtextxy(735,205,'neighbours in order to give birth to a live');
outtextxy(735,220,'cell');

end;
//DescriptionAndRules Ends

//Simulation Begins
function Simulation: integer;
var
current_map, nextstep_map : map;
i, j, k, inum, icycle : integer;
ch : char;
scycle_string, snumber_of_bacteria, spercent, sspace : longint; //for conversion
inumber_of_bacteria, ipercent : integer;
previous_numberofbacteria, repeat_counter : integer;
random_percentage : integer; //for random function
const
ispace = 14400;

begin
icycle := 0;
randomize;
random_percentage := 0;

settextstyle(2,0,2);
setcolor(12);
outtextxy(735,60, 'Bacteria Percentage');
settextstyle(1,0,1);
outtextxy(735,90, 'Click the corresponding key:');
settextstyle(1,0,1);
setcolor(7);
outtextxy(735,105, 'a - 5%');
outtextxy(735,120, 'b - 10%');
outtextxy(735,135, 'c - 25%');
outtextxy(735,150, 'd - 50%');

ch := ReadKey;
repeat

if ch = #97 then
   random_percentage := 20; //5%
if ch = #98 then
   random_percentage := 10; //10%
if ch = #99 then
   random_percentage := 4;  //25%
if ch = #100 then
   random_percentage := 2;  //50%

until random_percentage > 0;
InitialMenuEraser;



/////////////////////////////////////////////////
settextstyle(2,0,2);
setcolor(12);
outtextxy(735, 60, 'Press "Enter" to start');
//outtextxy(735, 80, 'simulation');
DescriptionAndRules; //
repeat
    ch:=ReadKey;

until ch=#13;
/////////////////////////////////////////////////

          for i := 1 to 120 do
              for j := 1 to 120 do
                  begin
                   nextstep_map[i][j] := 0;
                   inum := Random(random_percentage);
                        if inum = 1 then
                           begin
                                current_map[i][j] := 1;
                           end
                        else
                            begin
                                 current_map[i][j] := 0;
                            end;
                  end;
DrawArray(nextstep_map, current_map);//current state

inumber_of_bacteria := BacteriaCounter(current_map);
previous_numberofbacteria := inumber_of_bacteria;
setcolor(12);
settextstyle(1,0,1);
outtextxy(855,565, (IntToStr(ispace shl sspace)));
outtextxy(917,580, (IntToStr(inumber_of_bacteria shl snumber_of_bacteria)));


repeat_counter := 0;

repeat
//itteration begins
icycle := icycle + 1;
setcolor(12);
settextstyle(1,0,1);
outtextxy(855,520, (IntToStr(inumber_of_bacteria shl snumber_of_bacteria)));
outtextxy(855,535, (IntToStr(icycle shl scycle_string)));//itteration
outtextxy(855,550, (IntToStr(ipercent shl spercent)));
delay(20);
BlackBox;
//itteration ends

     Step(current_map, nextstep_map);
     DrawArray(current_map, nextstep_map);  //new state
     for i := 1 to 120 do
              for j := 1 to 120 do
                  current_map[i][j] := nextstep_map[i][j];

inumber_of_bacteria := BacteriaCounter(nextstep_map);

//Block determines whether the culture is stable (BEGIN)
if inumber_of_bacteria = previous_numberofbacteria then
   begin
        repeat_counter := repeat_counter + 1;
   end
else
    begin
         repeat_counter := 0;
    end;
previous_numberofbacteria := inumber_of_bacteria;
//Block determines whether the culture is stable (END)


ipercent := (inumber_of_bacteria*100) div 14400;


until (inumber_of_bacteria = 0) or (repeat_counter = 10);

settextstyle(2,0,2);
setcolor(12);
outtextxy(735,270,'THE CULTURE IS STABLE');
readkey();
end;
//Simulation Ends


//DisplayAMap Begins
procedure DisplayAMap;

var
i : integer;
          begin
          setcolor(8); //black - 16
               for i := 1 to 121 do
                   begin
                        MoveTo(6*i, 6);
                        LineTo(6*i, 726);
                        MoveTo(6, 6*i);
                        LineTo(726, 6*i);
                   end;
          end;
//DisplayAMap Ends

procedure StaticTextOutput;
begin
setcolor(7);     //12
settextstyle(2,0,4);  //5
outtextxy(736,13,'Bacteria Simulator');
settextstyle(1,0,1);
outtextxy(735,505,'Statistics:');
settextstyle(1,0,1);
outtextxy(740,520,'# of bacteria:');
outtextxy(740,535,'Iteration:');
outtextxy(740,550,'Percentage(%):');
outtextxy(740,565,'Space:');
outtextxy(740,580,'Initial # of bacteria:');
end;



//MAIN
begin
DrawBorder;

StaticTextOutput;

//DisplayAMap; //a grid

Simulation;

end.
//MAIN
