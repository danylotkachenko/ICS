{Filename 	: TkaDanBacteria}
{Program	:          }
{Outline                   }
{Programmer : Danylo Tkachenko}
{Class	    : ICS3U (Mr.Sze)}
{Due Date	: 2017-12-8}
uses WinCrt, Graph;

type
map = array [1..120] of array [1..120] of integer;

procedure DrawBorder;
var
gd,gm : smallint;

begin
gd:=detect;
gm:=0;
InitGraph(gd,gm, 'c:\dev-pas');

setcolor(7);
Line(5, 5, 727, 5);
Line(727, 5, 727, 727);
Line(727, 727, 5, 727);
Line(5, 727, 5, 5);

Line(727, 50, 1360, 50);
Line(1100, 50, 1100, 500);
Line(727, 500, 1360, 500);
Line(727, 727, 1360, 727);
Line(727, 5, 1360, 5);
Line(1360, 5, 1360, 727);
end;

procedure DrawBacteria (var BacteriaX, BacteriaY : integer);
          begin
               setcolor(12);
               Rectangle(6+3+(BacteriaX-1)*6, 6+3+(BacteriaY-1)*6,6+3+(BacteriaX-1)*6, 6+3+(BacteriaY-1)*6)
          end;

procedure CleanBacteria (var CoverX, CoverY : integer);
          begin
               setcolor(16);
               Rectangle(6+3+(CoverX-1)*6, 6+3+(CoverY-1)*6,6+3+(CoverX-1)*6, 6+3+(CoverY-1)*6)
          end;

{procedure TestDrawing;
var
i, j : integer;
          begin
          i := 5;
          j := 5;
          DrawBacteria(i, j);
          readkey;
          CleanBacteria(i, j);
          readkey;
          end;}

//PrintArray Begins

function DrawArray(var CurrentMap, NextStepMap: map) : integer;
var
i, j : integer;
begin
     for i := 1 to 120 do
         begin
              for j := 1 to 120 do
                  begin
                       if (CurrentMap[i][j] <> NextStepMap[i][j]) then
                       begin
                            if (NextStepMap[i][j] = 0) then
                               begin
                               CleanBacteria(i,j);
                               end;
                            if (NextStepMap[i][j] = 1) then
                               begin
                               DrawBacteria(i,j);
                               end;
                       end;
                  end;
         end;
end;
//PrintArray Ends


//GetNumberOfNeighbours Begins
function GetNumberOfNeighbours (var arrToPrint : map; i, j : integer) : integer;
begin
GetNumberOfNeighbours := 0;

if (i+1 <= 120) and (arrToPrint[i+1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (arrToPrint[i-1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j+1 <= 120) and (arrToPrint[i][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j-1 >= 1) and (arrToPrint[i][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 120) and (j+1 <= 120) and (arrToPrint[i+1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j-1 >= 1) and (arrToPrint[i-1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 120) and (j-1 >= 1) and (arrToPrint[i+1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j+1 <= 120) and (arrToPrint[i-1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

end;
//GetNumberOfNeighbours Ends

//Step Begins
function Step (var arrToPrint, NextStepMap: map) : integer; //add NextStepMap as an argument
var
number_of_neighbours, i, j : integer;
//icount : integer;
begin
//icount := 0;
     for i := 1 to 120 do
         for j := 1 to 120 do
             begin
             number_of_neighbours := GetNumberOfNeighbours(arrToPrint, i, j);

                  {if (arrToPrint[i][j] = 1) then
                     icount := icount + 1;}

                  if (arrToPrint[i][j] = 0) and (number_of_neighbours = 3) then
                     NextStepMap[i][j] := 1;

                  if (arrToPrint[i][j] = 1) and ((number_of_neighbours >= 4) or (number_of_neighbours <= 1)) then
                     NextStepMap[i][j] := 0;

                  if (arrToPrint[i][j] = 0) and ((number_of_neighbours >= 4) or (number_of_neighbours <= 1)) then
                     NextStepMap[i][j] := 0;

                  if (arrToPrint[i][j] = 1) and ((number_of_neighbours = 2) or (number_of_neighbours = 3)) then
                     NextStepMap[i][j] := 1;

                  if (arrToPrint[i][j] = 0) and (number_of_neighbours = 2) then
                     NextStepMap[i][j] := 0;
             end;
end;
//Step Ends

//BacteriaCounter Begins
function BacteriaCounter (var NextStepMap: map) : integer;
var
ibacteria_count, icount, i, j : integer;
begin
     ibacteria_count := 0;
     icount := 0;
                     for i := 1 to 120 do
                         for j := 1 to 120 do
                             if NextStepMap[i][j] = 1 then
                                ibacteria_count := ibacteria_count + 1;  //calculates number of bacteria

BacteriaCounter := ibacteria_count;
end;
//BacteriaCounter Ends

//Simulation Begins
function Simulation: integer;
var
current_map, nextstep_map : map;
i, j, k, inum : integer;
begin
randomize;
          for i := 1 to 120 do
              for j := 1 to 120 do
                  begin
                   nextstep_map[i][j] := 0;
                   inum := Random(5);
                        if inum = 4 then
                           begin
                                current_map[i][j] := 1;
                           end
                        else
                            begin
                                 current_map[i][j] := 0;
                            end;
                  end;
DrawArray(nextstep_map, current_map);//current state
//delay(200);
//readkey;

repeat
     Step(current_map, nextstep_map);
     DrawArray(current_map, nextstep_map);  //new state
     for i := 1 to 120 do
              for j := 1 to 120 do
              current_map[i][j] := nextstep_map[i][j];

until BacteriaCounter(nextstep_map) = 0;
//end;

readkey;
end;
//Simulation Ends

procedure DisplayAMap;
var
i : integer;
          begin
          setcolor(8); //black - 16
               for i := 1 to 121 do
                   begin
                        MoveTo(6*i, 6);
                        LineTo(6*i, 726);
                        MoveTo(6, 6*i);
                        LineTo(726, 6*i);
                   end;
          end;


//MAIN
begin

DrawBorder;

//setbkcolor(5);
setcolor(7);     //12
settextstyle(2,0,4);  //5
outtextxy(736,13,'Bacteria Simulator');
settextstyle(1,0,1);
outtextxy(735,505,'Statistics:');


//DisplayAMap;

Simulation;

end.
//MAIN
