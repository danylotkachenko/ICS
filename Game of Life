{Filename 	: TkaDanBacteria}
{Program	:       }
{Outline            }
{Programmer : Danylo Tkachenko}
{Class	    : ICS3U (Mr.Sze)}
{Due Date	: 2017-11-14}
//https://www.freepascal.org/docs-html/rtl/graph/line.html

type
 map = array [1..70] of array [1..70] of integer;

var
 numbers : map;

{//FillArray Begins
function FillArray(var arrToFill: map) : integer;
var
i, j, inum : integer;
begin
randomize;
          for i := 1 to 70 do
              for j := 1 to 70 do
                  begin
                   inum := Random(5);
                        if inum = 4 then
                           begin
                                arrToFill[i][j] := 1;
                           end
                        else
                            begin
                                 arrToFill[i][j] := 0;
                            end;
                  end;
end;
//FillArray Ends}

//PrintArray Begins
function PrintArray(var arrToPrint: map) : integer;
var
i, j : integer;
begin
     for i := 1 to 70 do
     begin
         for j := 1 to 70 do
             begin
              write (arrToPrint[i][j], ' ');
             end;
         writeln ('');
     end;
end;
//PrintArray Ends

//GetNumberOfNeighbours Begins
function GetNumberOfNeighbours (var arrToPrint : map; i, j : integer) : integer;  //sub , with ;
begin
GetNumberOfNeighbours := 0;

if (i+1 <= 70) and (arrToPrint[i+1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (arrToPrint[i-1][j] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j+1 <= 70) and (arrToPrint[i][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (j-1 >= 1) and (arrToPrint[i][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 70) and (j+1 <= 70) and (arrToPrint[i+1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j-1 >= 1) and (arrToPrint[i-1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i+1 <= 70) and (j-1 >= 1) and (arrToPrint[i+1][j-1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

if (i-1 >= 1) and (j+1 <= 70) and (arrToPrint[i-1][j+1] = 1) then
GetNumberOfNeighbours := GetNumberOfNeighbours + 1;

end;
//GetNumberOfNeighbours Ends

//Step Begins
function Step (var arrToPrint: map) : integer;
var
NextStepMap : map;
number_of_neighbours, i, j : integer;
begin
     for i := 1 to 70 do
     begin
         for j := 1 to 70 do
             begin
             number_of_neighbours := GetNumberOfNeighbours(arrToPrint, i, j);
                  if (arrToPrint[i][j] = 0) and (number_of_neighbours = 3) then
                     NextStepMap[i][j] := 1;

                  if (number_of_neighbours >= 4) or (number_of_neighbours <= 1)then
                     NextStepMap[i][j] := 0;

                  if (arrToPrint[i][j] = 1) and ((number_of_neighbours = 2) or (number_of_neighbours = 3)) then
                     NextStepMap[i][j] := 1;
             end;
     end;
PrintArray(NextStepMap);
end;
//Step Ends

//Simulation Begins
function Simulation: integer;
var
arrToFill : map;
i, j, inum : integer;
begin
          for i := 1 to 70 do
              for j := 1 to 70 do
                  begin
                  arrToFill[i][j] := 0;
                  end;
arrToFill[10][10] := 1;
arrToFill[10][11] := 1;
arrToFill[10][12] := 1;
PrintArray(arrToFill);
readln();

Step(arrToFill);
end;
//Simulation Ends

begin
Simulation;
readln();
end.
